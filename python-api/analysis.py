
#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø–∞—Å—Ç–±–∏—â
–í—Ö–æ–¥: JSON —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
–í—ã—Ö–æ–¥: JSON —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ base64
"""

import json
import argparse
import sys
import time
import random
import base64
from datetime import datetime
from io import BytesIO

try:
    from PIL import Image, ImageDraw, ImageFont
except ImportError:
    print("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install Pillow")
    sys.exit(1)


class PastureMonitoringStub:
    def __init__(self):
        pass
        
    def validate_coordinates(self, data):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª–∏–≥–æ–Ω–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if 'geometry' in data:
            geometry = data['geometry']
            if geometry.get('type') == 'Polygon' and 'coordinates' in geometry:
                coords = geometry['coordinates']
                if coords and len(coords[0]) >= 3:
                    return coords[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ –ø–æ–ª–∏–≥–æ–Ω–∞
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if 'coordinates' in data:
            coords = data['coordinates']
            if isinstance(coords, list) and len(coords) >= 3:
                return coords
        
        if 'polygon' in data:
            coords = data['polygon']
            if isinstance(coords, list) and len(coords) >= 3:
                return coords
        
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª–∏–≥–æ–Ω–∞.")
    
    def simulate_processing(self, coordinates):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("üõ∞Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        time.sleep(random.uniform(0.5, 1.0))
        
        print("üåø –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        time.sleep(random.uniform(0.5, 1.0))
        
        print("üìä –†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏...")
        time.sleep(random.uniform(0.3, 0.8))
        
        print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—è –¥–ª—è –∫–∞—Ä—Ç—ã...")
        time.sleep(random.uniform(0.2, 0.5))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = {
            'ndvi_mean': round(random.uniform(0.2, 0.8), 3),
            'ndvi_std': round(random.uniform(0.05, 0.15), 3),
            'degradation_risk': random.choice(['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π']),
            'vegetation_coverage': round(random.uniform(30, 85), 1),
            'soil_moisture': round(random.uniform(15, 45), 1),
            'area_hectares': round(self._calculate_area(coordinates), 2),
            'analysis_date': datetime.now().isoformat(),
            'coordinates_count': len(coordinates)
        }
        
        return metrics
    
    def _calculate_area(self, coordinates):
        """–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)"""
        if len(coordinates) < 3:
            return 0.0
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ bounding box
        lats = [coord[1] for coord in coordinates]
        lons = [coord[0] for coord in coordinates]
        
        lat_diff = max(lats) - min(lats)
        lon_diff = max(lons) - min(lons)
        
        # –û—á–µ–Ω—å –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–ª–æ—â–∞–¥–∏ –≤ –≥–µ–∫—Ç–∞—Ä–∞—Ö
        area_deg_sq = lat_diff * lon_diff
        area_hectares = area_deg_sq * 111320 * 111320 / 10000  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –≥–µ–∫—Ç–∞—Ä—ã
        
        return max(1.0, area_hectares)  # –ú–∏–Ω–∏–º—É–º 1 –≥–µ–∫—Ç–∞—Ä
    
    def generate_result_image(self, coordinates, metrics):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Å—Ç–±–∏—â–∞ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É"""
        # –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 512x512 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞)
        img = Image.new('RGBA', (512, 512), color=(0, 0, 0, 0))  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        draw = ImageDraw.Draw(img)
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–∞—Å—Ç–±–∏—â–∞ (—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)
        colors = {
            '–ù–∏–∑–∫–∏–π': (76, 175, 80, 120),      # –ó–µ–ª–µ–Ω—ã–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            '–°—Ä–µ–¥–Ω–∏–π': (255, 152, 0, 120),     # –û—Ä–∞–Ω–∂–µ–≤—ã–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            '–í—ã—Å–æ–∫–∏–π': (244, 67, 54, 120)      # –ö—Ä–∞—Å–Ω—ã–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        }
        
        risk_color = colors.get(metrics['degradation_risk'], (158, 158, 158, 120))
        
        # –†–∏—Å—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–∞—Å—Ç–±–∏—â–∞ –∫–∞–∫ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –∑–∞–ª–∏–≤–∫—É
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        margin = 20
        draw.rectangle([margin, margin, 512-margin, 512-margin], 
                      fill=risk_color, outline=None)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É "—Ç—Ä–∞–≤—ã" - —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ–ª–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        import random
        random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ "–ø—è—Ç–Ω–∞" —Ç—Ä–∞–≤—ã —Ä–∞–∑–Ω—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤
        base_color = risk_color[:3]  # –£–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
        
        for _ in range(100):
            x = random.randint(margin, 512-margin)
            y = random.randint(margin, 512-margin)
            size = random.randint(2, 8)
            
            # –í–∞—Ä—å–∏—Ä—É–µ–º –æ—Ç—Ç–µ–Ω–æ–∫
            color_variation = random.randint(-20, 20)
            varied_color = tuple(max(0, min(255, c + color_variation)) for c in base_color)
            varied_color += (random.randint(80, 150),)  # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ñ–∞
            
            draw.ellipse([x, y, x+size, y+size], fill=varied_color)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        for _ in range(20):
            x = random.randint(margin, 512-margin-50)
            y = random.randint(margin, 512-margin-50)
            w = random.randint(20, 50)
            h = random.randint(20, 50)
            
            # –ï—â–µ –±–æ–ª–µ–µ —Ç–æ–Ω–∫–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ü–≤–µ—Ç–∞
            color_variation = random.randint(-10, 10)
            varied_color = tuple(max(0, min(255, c + color_variation)) for c in base_color)
            varied_color += (random.randint(60, 100),)  # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ñ–∞
            
            draw.ellipse([x, y, x+w, y+h], fill=varied_color)
        
        return img
    
    def image_to_base64(self, image):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64"""
        buffer = BytesIO()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É
        image.save(buffer, format='PNG', optimize=True)
        img_bytes = buffer.getvalue()
        img_base64 = base64.b64encode(img_bytes).decode('utf-8')
        return img_base64
    
    def process(self, input_data):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print("üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª–∏–≥–æ–Ω–∞...")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        coordinates = self.validate_coordinates(input_data)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {len(coordinates)}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        metrics = self.simulate_processing(coordinates)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result_image = self.generate_result_image(coordinates, metrics)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        image_base64 = self.image_to_base64(result_image)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'status': 'success',
            'metrics': metrics,
            'image_base64': image_base64,
            'image_format': 'PNG'
        }
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return result


def main():
    parser = argparse.ArgumentParser(
        description='–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø–∞—Å—Ç–±–∏—â'
    )
    parser.add_argument('input_file', help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏')
    parser.add_argument('-o', '--output', help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    
    args = parser.parse_args()
    
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(args.input_file, 'r', encoding='utf-8') as f:
            input_data = json.load(f)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processor = PastureMonitoringStub()
        result = processor.process(input_data)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if args.output:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(args.output, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {args.output}")
        else:
            # –í—ã–≤–æ–¥–∏–º –≤ stdout (–¥–ª—è API)
            print("\n" + "="*50)
            print("–†–ï–ó–£–õ–¨–¢–ê–¢ (JSON):")
            print("="*50)
            print(json.dumps(result, ensure_ascii=False, indent=2))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print(f"\nüìä –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –†–∏—Å–∫ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏: {result['metrics']['degradation_risk']}")
        print(f"   NDVI: {result['metrics']['ndvi_mean']}")
        print(f"   –ü–ª–æ—â–∞–¥—å: {result['metrics']['area_hectares']} –≥–∞")
        print(f"   –†–∞–∑–º–µ—Ä PNG —Å–ª–æ—è: {len(result['image_base64'])} —Å–∏–º–≤–æ–ª–æ–≤ base64")
        print(f"   –§–æ—Ä–º–∞—Ç: 512x512 PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É")
        
    except Exception as e:
        error_result = {
            'status': 'error',
            'error_message': str(e)
        }
        
        if args.output:
            with open(args.output, 'w', encoding='utf-8') as f:
                json.dump(error_result, f, ensure_ascii=False, indent=2)
        else:
            print(json.dumps(error_result, ensure_ascii=False, indent=2))
        
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
